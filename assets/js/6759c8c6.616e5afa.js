"use strict";(self.webpackChunkalvarolorente_dev=self.webpackChunkalvarolorente_dev||[]).push([[9170],{5128:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>c});var n=r(8723),i=r(4848),o=r(8453);const a={title:"Delivery Acceleration: Version Control Integration Strategy",authors:"alvarolorentedev",draft:!1,description:"How do you integrate code in the team matters, it will directly affect the rest of your architecture and practices like we have seen in previous chapters",tags:["productivity","devops","programming","softwaredevelopment"],canonical_url:"https://www.alvarolorente.dev/blog/2022/10/12/delivery-acceleration-version-control-integration-strategy",cover_image:"https://www.alvarolorente.dev/img/blog/trunk.png",series:"Accelerate Continious Integration & Delivery Practices"},s=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Gitflow: The Bad &amp; The Ugly",id:"gitflow-the-bad--the-ugly",level:2},{value:"Trunk-Based Development: The Good",id:"trunk-based-development-the-good",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const t={a:"a",br:"br",h2:"h2",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["I have already written some ",(0,i.jsx)(t.a,{href:"https://www.alvarolorente.dev/blog/2022/08/08/stop-prs",children:"other post"})," on this topic. I will go straight to the point on comparing Git Flow (a ",(0,i.jsx)(t.a,{href:"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow",children:"legacy strategy"})," that most companies use) and Trunk-Based Development."]}),"\n",(0,i.jsx)(t.h2,{id:"gitflow-the-bad--the-ugly",children:"Gitflow: The Bad & The Ugly"}),"\n",(0,i.jsxs)(t.p,{children:["Why do I call it the bad and the ugly? Because it does not allow you to achieve Continuous Deployment.",(0,i.jsx)(t.br,{}),"\n","The idea is that every developer works isolated on their branch, validate on their branch and ask through a merge request to add their code to the X stage branch."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.img,{src:"https://www.alvarolorente.dev/img/blog/gitflow-diagram-768x973.png",alt:""}),(0,i.jsx)(t.br,{}),"\n","There are multiple issues with this:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Code does not exist isolated, we don't deploy isolated code, so the isolated test is not valid as it will require retesting."}),"\n",(0,i.jsx)(t.li,{children:"The peer review process happens at the end, causing a very slow feedback loop. Having to rewrite code that could be avoided."}),"\n",(0,i.jsx)(t.li,{children:"The more time the branch lives, the more it diverges from the original behavior and the more complex it is to merge."}),"\n",(0,i.jsx)(t.li,{children:"Merging can cause complex conflicts that require revalidation, and it might have side effect in other features."}),"\n",(0,i.jsx)(t.li,{children:"As there needs to be validations of the merges, it's normal to have multiple environments that give a false sense of security, increases the $ cost and increases the lead time."}),"\n",(0,i.jsx)(t.li,{children:"Egos and preferences become part of the review process, as it has become an 'accepted' practice that the 'experts' or 'leads' do the reviews."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"All of this is red tape to go through is a problem that makes delivery slower, and create a lack of ownership mentality farther away from what happen to the individual branch."}),"\n",(0,i.jsx)(t.p,{children:"This affects mostly negatively, most of DORA 4 metrics:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\u274c ",(0,i.jsx)(t.strong,{children:"Deployment frequency"})]}),"\n",(0,i.jsxs)(t.li,{children:["\u274c ",(0,i.jsx)(t.strong,{children:"Lead Time for change"})]}),"\n",(0,i.jsxs)(t.li,{children:["\u274c ",(0,i.jsx)(t.strong,{children:"Mean Time To Recovery"})]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Is there a simpler and better way to collaborate on code way?"}),"\n",(0,i.jsx)(t.h2,{id:"trunk-based-development-the-good",children:"Trunk-Based Development: The Good"}),"\n",(0,i.jsx)(t.p,{children:"What happens if we all commit to the same branch."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://www.alvarolorente.dev/img/blog/trunk.png",alt:""})}),"\n",(0,i.jsx)(t.p,{children:"Most of the expressed issues are solved, in this scenario by:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Code is never isolated, as we all push code to the same place."}),"\n",(0,i.jsx)(t.li,{children:"Teams that do this practices also practice pair programming, making the peer review process is continuous and synchronous."}),"\n",(0,i.jsx)(t.li,{children:"As individuals push multiple times a day, merge conflicts are non-existent or small."}),"\n",(0,i.jsx)(t.li,{children:"Does not require revalidation, as validation is a continuous stream in the single environment."}),"\n",(0,i.jsx)(t.li,{children:"No ego environment tent to appear as there is no centralize approver of code, so it's not a matter of preference but a team effort and ownership."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"As we have seen before, having unfinished code does not need to affect users, as it is common practice to use feature flags and/or branching by abstraction."}),"\n",(0,i.jsx)(t.p,{children:"This affect the next DORA 4 metrics:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\u2714\ufe0f ",(0,i.jsx)(t.strong,{children:"Deployment frequency"})]}),"\n",(0,i.jsxs)(t.li,{children:["\u2714\ufe0f ",(0,i.jsx)(t.strong,{children:"Lead Time for change"})]}),"\n",(0,i.jsxs)(t.li,{children:["\u2714\ufe0f ",(0,i.jsx)(t.strong,{children:"Mean Time To Recovery"})]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(t.p,{children:"Simplicity is king. Having a simpler structure enables speed and quality of delivery, as it allow teams to work closely, take shared ownership and act faster related to a smaller change."})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>s});var n=r(6540);const i={},o=n.createContext(i);function a(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(o.Provider,{value:t},e.children)}},8723:e=>{e.exports=JSON.parse('{"permalink":"/blog/2022/10/12/delivery-acceleration-version-control-integration-strategy","editUrl":"https://github.com/alvarolorentedev/website/tree/main/blog/2022-10-12-delivery-acceleration-version-control-integration-strategy.md","source":"@site/blog/2022-10-12-delivery-acceleration-version-control-integration-strategy.md","title":"Delivery Acceleration: Version Control Integration Strategy","description":"How do you integrate code in the team matters, it will directly affect the rest of your architecture and practices like we have seen in previous chapters","date":"2022-10-12T00:00:00.000Z","tags":[{"inline":true,"label":"productivity","permalink":"/blog/tags/productivity"},{"inline":true,"label":"devops","permalink":"/blog/tags/devops"},{"inline":true,"label":"programming","permalink":"/blog/tags/programming"},{"inline":true,"label":"softwaredevelopment","permalink":"/blog/tags/softwaredevelopment"}],"readingTime":2.56,"hasTruncateMarker":false,"authors":[{"name":"Alvaro Jose","title":"Fractional CTO & Founder","url":"https://github.com/alvarolorentedev","imageURL":"https://avatars.githubusercontent.com/u/3071208","key":"alvarolorentedev","page":null}],"frontMatter":{"title":"Delivery Acceleration: Version Control Integration Strategy","authors":"alvarolorentedev","draft":false,"description":"How do you integrate code in the team matters, it will directly affect the rest of your architecture and practices like we have seen in previous chapters","tags":["productivity","devops","programming","softwaredevelopment"],"canonical_url":"https://www.alvarolorente.dev/blog/2022/10/12/delivery-acceleration-version-control-integration-strategy","cover_image":"https://www.alvarolorente.dev/img/blog/trunk.png","series":"Accelerate Continious Integration & Delivery Practices"},"unlisted":false,"prevItem":{"title":"Delivery Acceleration: Parallel Changes Strategy","permalink":"/blog/2022/10/14/delivery-acceleration-parallel-changes-strategy"},"nextItem":{"title":"Delivery Acceleration: Testing & Validation","permalink":"/blog/2022/10/11/delivery-acceleration-testing-validation"}}')}}]);