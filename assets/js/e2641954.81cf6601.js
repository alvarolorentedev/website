"use strict";(self.webpackChunkalvarolorente_dev=self.webpackChunkalvarolorente_dev||[]).push([[4140],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=a,g=p["".concat(l,".").concat(h)]||p[h]||d[h]||i;return n?o.createElement(g,r(r({ref:t},u),{},{components:n})):o.createElement(g,r({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var c=2;c<i;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2974:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var o=n(7462),a=(n(7294),n(4137));const i={published:"2024-03-07T04:00:00.000Z",series:"Engineering Strategy 101",authors:["alvarolorentedev"],Tags:["business","tech","productivity","technology"],title:"Beyond Coding: The Cost of Software Development"},r="Beyond Code: the cost of software development",s={permalink:"/blog/2024/03/07/T04:00:00.000Z-Beyond Coding: The Cost of Software Development",editUrl:"https://github.com/alvarolorentedev/website/tree/main/blog/2024-03-07T04:00:00.000Z-Beyond Coding: The Cost of Software Development.md",source:"@site/blog/2024-03-07T04:00:00.000Z-Beyond Coding: The Cost of Software Development.md",title:"Beyond Coding: The Cost of Software Development",description:"In 2024, Software has become the backbone of countless industries, it seems natural to equate software engineering strictly with coding. After all, code is the very fabric of software. However, I've come to appreciate that software engineering encompasses far more than just the act of coding. It involves understanding business needs, validating ideas, crafting user experiences, and so much more.",date:"2024-03-07T00:00:00.000Z",formattedDate:"March 7, 2024",tags:[],readingTime:6.45,hasTruncateMarker:!1,authors:[{name:"Alvaro Jose",title:"Fractional CTO & Founder",url:"https://github.com/alvarolorentedev",imageURL:"https://avatars.githubusercontent.com/u/3071208",key:"alvarolorentedev"}],frontMatter:{published:"2024-03-07T04:00:00.000Z",series:"Engineering Strategy 101",authors:["alvarolorentedev"],Tags:["business","tech","productivity","technology"],title:"Beyond Coding: The Cost of Software Development"},nextItem:{title:"Harmonizing Innovation: The Power of Common Practices in Software Engineering Organizations",permalink:"/blog/2024/02/29/T04:00:00.000Z-Harmonizing Innovation: The Power of Common Practices in Software Engineering Organizations"}},l={authorsImageUrls:[void 0]},c=[{value:"The High Cost of Coding",id:"the-high-cost-of-coding",level:2},{value:"The Value of Software Teams",id:"the-value-of-software-teams",level:2},{value:"The Process of Creating New Solutions",id:"the-process-of-creating-new-solutions",level:3},{value:"Validating Business Without Creating a Repetitive Solution",id:"validating-business-without-creating-a-repetitive-solution",level:3},{value:"Explore Buy vs. Build Alternative",id:"explore-buy-vs-build-alternative",level:3},{value:"Explore Low Code and No Code",id:"explore-low-code-and-no-code",level:3},{value:"Creation of Throwaway MVPs",id:"creation-of-throwaway-mvps",level:3},{value:"Embracing a Full Spectrum Approach",id:"embracing-a-full-spectrum-approach",level:3}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In 2024, Software has become the backbone of countless industries, it seems natural to equate software engineering strictly with coding. After all, code is the very fabric of software. However, I've come to appreciate that software engineering encompasses far more than just the act of coding. It involves understanding business needs, validating ideas, crafting user experiences, and so much more. "),(0,a.kt)("p",null,"The reality is that while coding a solution is vital, it is also a considerable investment\u2014both in time and resources. This investment makes it imperative to explore and validate options thoroughly before committing to a specific path. "),(0,a.kt)("p",null,"Here, we delve into why software engineering is not just about coding and how a broader perspective can lead to more successful outcomes."),(0,a.kt)("h2",{id:"the-high-cost-of-coding"},"The High Cost of Coding"),(0,a.kt)("p",null,"Coding, by nature, is an expensive process. This cost isn't just financial; it encompasses time, effort, and the opportunity cost of not pursuing other projects. This high cost makes it essential to ensure that once the coding phase begins, the project has a high probability of success. Pre-validation steps, therefore, are not just beneficial but critical."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Type")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Cost")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Direct Development Costs")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"- Developer Salaries"),": The most significant direct cost, encompassing the wages of personnel directly involved in the development process.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"- ",(0,a.kt)("strong",{parentName:"td"},"Tools and Licenses"),": Expenses related to the software licenses, development tools, integrated development environments (IDEs), and any third-party services required for coding and project management."),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Infrastructure Costs"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"- Hardware"),": Investments in servers, computers, and other hardware necessary for development, testing, and deployment.")))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Software"),": Costs for operating systems, databases, server software, and any other software infrastructure required."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Cloud Services"),": Expenses related to cloud computing resources if the development or hosting environment is cloud-based, including storage, computing power, and bandwidth. |\n| Opportunity Costs             | ",(0,a.kt)("strong",{parentName:"li"},"- Resource Allocation"),": The cost of dedicating resources to one project over another, potentially more valuable project. This includes the time and attention of the development team."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Market Entry Timing"),": The potential revenue lost by not entering the market sooner, especially relevant in fast-moving sectors where being first can confer a significant advantage.                                                 |\n| Maintenance and Support Costs | ",(0,a.kt)("strong",{parentName:"li"},"- Ongoing Maintenance"),": Regular updates, bug fixes, and security patches to ensure the software remains functional and secure over time."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Customer Support"),": Costs associated with providing user support, including staffing support desks, creating documentation, and developing training materials.                                                                                                                      |")),(0,a.kt)("h2",{id:"the-value-of-software-teams"},"The Value of Software Teams"),(0,a.kt)("p",null,"While coding is undeniably at the heart of the development cycle. The value that software teams bring to an organization stretches far beyond the lines of code they write. Recognizing and leveraging these additional contributions can significantly enhance the impact and success of projects. Here\u2019s a closer look at the diverse values software teams offer:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Identifying the Problems:")," The first step in any software project isn't to start coding, but to understand the problem being solved. This means engaging with stakeholders, conducting market research, and performing competitive analysis. A profound understanding of the issue helps in crafting solutions that are not just technically sound, but also relevant and useful."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Validating the Business Case:")," Before a single line of code is written, it's critical to validate the business case for the project. This involves analyzing the potential return on investment, exploring the market demand, and considering various business models. Tools like the Lean Canvas can help in structuring these thoughts and ensuring that the project is viable from a business perspective."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Exploring Solutions Beyond Code:")," Not every issue requires a complex, coded solution. Occasionally, the answer might lie in utilizing existing platforms, integrating with third-party services, or even creating a non-technical process. For instance, automating tasks through existing tools or leveraging no-code/low-code platforms can be both cost-effective and efficient.")),(0,a.kt)("h3",{id:"the-process-of-creating-new-solutions"},"The Process of Creating New Solutions"),(0,a.kt)("p",null,"Tu fit the value of a team we have defined. This process involves several key steps designed to validate the business case, explore efficient development alternatives, and ensure the solution effectively addresses user needs without unnecessarily reinventing the wheel. Here's a closer look at these critical stages:"),(0,a.kt)("h3",{id:"validating-business-without-creating-a-repetitive-solution"},"Validating Business Without Creating a Repetitive Solution"),(0,a.kt)("p",null,"Before diving into development, it's crucial to ensure that the solution being proposed does not merely replicate existing offerings without adding value. This validation involves:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Market Research"),": Conducting thorough market research to understand the competitive landscape and identify gaps or unmet needs that the new solution could address."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"User Interviews and Surveys"),": Engaging directly with potential users to gather insights into their challenges and the limitations of current solutions."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Feasibility Studies"),": Assessing the technical and economic feasibility of the proposed solution to ensure it's viable and sustainable over time.")),(0,a.kt)("p",null,"This stage aims to confirm that the solution brings unique value to the market, justifying the investment required for its development."),(0,a.kt)("h3",{id:"explore-buy-vs-build-alternative"},"Explore Buy vs. Build Alternative"),(0,a.kt)("p",null,"Once the need for a new solution is validated, the next step is to decide whether to develop it in-house (build) or leverage existing solutions through purchase or licensing (buy). This decision should consider:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Cost Analysis"),": Comparing the total cost of ownership (TCO) for both options, including development, maintenance, and potential scalability costs."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Time to Market"),": Evaluating how quickly the solution can be deployed using each approach, considering the urgency of the need it addresses."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Customization and Control"),": Assessing the level of customization required and the importance of having complete control over the solution's features and development roadmap.")),(0,a.kt)("p",null,"Exploring the buy vs. build alternative helps ensure that resources are allocated efficiently, focusing on creating value rather than duplicating existing technologies."),(0,a.kt)("h3",{id:"explore-low-code-and-no-code"},"Explore Low Code and No Code"),(0,a.kt)("p",null,"For many organizations, low code and no code platforms offer a compelling middle ground between buying off-the-shelf solutions and custom development. These platforms enable:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Rapid Prototyping"),": Allowing teams to quickly build and iterate on solutions without extensive coding, speeding up the validation process."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Cost Efficiency"),": Reducing the need for specialized development skills, thereby lowering the cost of solution development and maintenance."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Empowering Non-Technical Users"),": Enabling business analysts and other non-technical stakeholders to contribute directly to the solution creation process.")),(0,a.kt)("p",null,"Exploring low code and no code options can democratize the development process and accelerate innovation within the organization."),(0,a.kt)("h3",{id:"creation-of-throwaway-mvps"},"Creation of Throwaway MVPs"),(0,a.kt)("p",null,"Developing throwaway Minimum Viable Products (MVPs) is a strategy to test hypotheses about a solution's value proposition with minimal investment. This approach involves:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Focused Development"),": Building a simplified version of the solution that includes only the core features necessary to test its viability and user acceptance."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Feedback and Learning"),": Using the MVP to gather user feedback and insights, which can inform further development or pivot decisions."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Willingness to Pivot or Discard"),": Being prepared to modify the solution significantly or abandon it based on feedback, minimizing sunk costs in non-viable directions.")),(0,a.kt)("p",null,"The creation of throwaway MVPs allows teams to experiment and learn quickly, ensuring that development efforts are focused on solutions that genuinely meet user needs and have a viable business case."),(0,a.kt)("h3",{id:"embracing-a-full-spectrum-approach"},"Embracing a Full Spectrum Approach"),(0,a.kt)("p",null,"Software engineering is a discipline that transcends coding. It's about problem-solving, creativity, and understanding human needs. By embracing a holistic approach that includes rigorous validation, exploration of non-coded solutions, and a keen eye on the business aspects, software projects can achieve greater success. This approach saves resources and ensures that when we do code, we're building something of genuine value and relevance."),(0,a.kt)("p",null,"As we navigate the complexities of modern software development, let us remember that our goal isn't just to write code but to solve problems in the most efficient and impactful way possible. This perspective is what will continue to drive innovation and success in the field of software engineering."))}d.isMDXComponent=!0}}]);